#!/usr/bin/env python3
"""
Demo Data Creator for Workers System
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ MongoDB
"""

import asyncio
import uuid
from datetime import datetime, timezone, timedelta
from motor.motor_asyncio import AsyncIOMotorClient

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGO_URL = "mongodb://localhost:27017"
DB_NAME = "workersystem"

async def create_demo_data():
    print("üöÄ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Workers System...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    mongo_client = AsyncIOMotorClient(MONGO_URL)
    db = mongo_client[DB_NAME]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await db.command("ping")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
        return
    
    users_col = db.users
    tasks_col = db.tasks
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    await users_col.delete_many({})
    await tasks_col.delete_many({})
    print("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    demo_users = []
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    admin_id = uuid.uuid4().hex
    admin = {
        "id": admin_id,
        "tg_chat_id": 123456789,
        "username": "admin",
        "first_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "last_name": "–°–∏—Å—Ç–µ–º—ã",
        "phone": "+7 (999) 123-45-67",
        "role": "admin",
        "is_active": True,
        "is_verified": True,
        "worker_profile": None,
        "client_profile": None,
        "created_at": datetime.now(timezone.utc).isoformat()
    }
    demo_users.append(admin)
    
    # –ö–ª–∏–µ–Ω—Ç—ã
    clients = [
        {
            "username": "client1",
            "first_name": "–ò–≤–∞–Ω",
            "last_name": "–ü–µ—Ç—Ä–æ–≤",
            "company": "–û–û–û –ü–µ—Ä–µ–µ–∑–¥—ã",
            "phone": "+7 (999) 111-22-33"
        },
        {
            "username": "client2", 
            "first_name": "–ú–∞—Ä–∏—è",
            "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
            "company": "–ò–ü –°–∏–¥–æ—Ä–æ–≤–∞",
            "phone": "+7 (999) 444-55-66"
        }
    ]
    
    client_ids = []
    for i, client_data in enumerate(clients):
        client_id = uuid.uuid4().hex
        client_ids.append(client_id)
        
        client = {
            "id": client_id,
            "tg_chat_id": 200000000 + i,
            "username": client_data["username"],
            "first_name": client_data["first_name"],
            "last_name": client_data["last_name"],
            "phone": client_data["phone"],
            "role": "client",
            "is_active": True,
            "is_verified": True,
            "worker_profile": None,
            "client_profile": {
                "company_name": client_data["company"],
                "total_orders": i * 3 + 2,
                "total_spent": (i + 1) * 15000.0,
                "rating": 4.8 - i * 0.2
            },
            "created_at": datetime.now(timezone.utc).isoformat()
        }
        demo_users.append(client)
    
    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
    workers = [
        {
            "username": "worker1",
            "first_name": "–ê–ª–µ–∫—Å–µ–π",
            "last_name": "–ì—Ä—É–∑—á–∏–∫–æ–≤",
            "worker_types": ["loader"],
            "rating": 4.9,
            "completed": 25
        },
        {
            "username": "worker2",
            "first_name": "–î–º–∏—Ç—Ä–∏–π", 
            "last_name": "–í–æ–¥–∏—Ç–µ–ª–µ–≤",
            "worker_types": ["driver", "loader"],
            "rating": 4.7,
            "completed": 18
        },
        {
            "username": "worker3",
            "first_name": "–°–µ—Ä–≥–µ–π",
            "last_name": "–¢–∞–∫–µ–ª–∞–∂–Ω–∏–∫–æ–≤",
            "worker_types": ["rigger", "loader"],
            "rating": 5.0,
            "completed": 32
        },
        {
            "username": "worker4",
            "first_name": "–ê–Ω—Ç–æ–Ω",
            "last_name": "–£–±–æ—Ä—â–∏–∫–æ–≤",
            "worker_types": ["cleaner"],
            "rating": 4.6,
            "completed": 12
        }
    ]
    
    worker_ids = []
    for i, worker_data in enumerate(workers):
        worker_id = uuid.uuid4().hex
        worker_ids.append(worker_id)
        
        worker = {
            "id": worker_id,
            "tg_chat_id": 300000000 + i,
            "username": worker_data["username"],
            "first_name": worker_data["first_name"],
            "last_name": worker_data["last_name"],
            "phone": f"+7 (999) {700 + i:03d}-{(i+1)*11:02d}-{(i+2)*22:02d}",
            "role": "worker",
            "is_active": True,
            "is_verified": True,
            "worker_profile": {
                "worker_types": worker_data["worker_types"],
                "rating": worker_data["rating"],
                "completed_tasks": worker_data["completed"],
                "cancelled_tasks": i,
                "on_vacation": False,
                "vacation_start": None,
                "vacation_end": None,
                "metro_stations": [
                    ["–°–æ–∫–æ–ª—å–Ω–∏–∫–∏", "–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è", "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è"][i % 3],
                    ["–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã", "–ö—Ä–æ–ø–æ—Ç–∫–∏–Ω—Å–∫–∞—è", "–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥"][(i+1) % 3]
                ],
                "work_schedule": {
                    "monday": {"available": True, "hours": "09:00-18:00"},
                    "tuesday": {"available": True, "hours": "09:00-18:00"},
                    "wednesday": {"available": True, "hours": "09:00-18:00"},
                    "thursday": {"available": True, "hours": "09:00-18:00"},
                    "friday": {"available": True, "hours": "09:00-18:00"},
                    "saturday": {"available": i % 2 == 0, "hours": "10:00-16:00"},
                    "sunday": {"available": False, "hours": None}
                },
                "special_skills": {
                    "has_belts": "rigger" in worker_data["worker_types"],
                    "has_transport": "driver" in worker_data["worker_types"],
                    "experience_years": i + 2
                }
            },
            "client_profile": None,
            "created_at": (datetime.now(timezone.utc) - timedelta(days=30-i*5)).isoformat()
        }
        demo_users.append(worker)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await users_col.insert_many(demo_users)
    print(f"üë• –°–æ–∑–¥–∞–Ω–æ {len(demo_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
    demo_tasks = []
    
    task_templates = [
        {
            "title": "–ü–æ–≥—Ä—É–∑–∫–∞ –º–µ–±–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–µ–∑–¥–µ",
            "description": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≥—Ä—É–∑–∏—Ç—å –º–µ–±–µ–ª—å –∏–∑ 3-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –≥—Ä—É–∑–æ–≤–∏–∫. –ú–µ–±–µ–ª—å: –¥–∏–≤–∞–Ω, —à–∫–∞—Ñ, –∫–æ–º–æ–¥, —Å—Ç–æ–ª, —Å—Ç—É–ª—å—è.",
            "task_type": "moving",
            "location": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 10",
            "metro_station": "–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥",
            "requirements": [{"worker_type": "loader", "count": 2, "hourly_rate": 500.0}],
            "duration_hours": 4,
            "client_price": 4000.0,
            "status": "pending"
        },
        {
            "title": "–†–∞–∑–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            "description": "–†–∞–∑–≥—Ä—É–∑–∏—Ç—å –∫–∏—Ä–ø–∏—á, —Ü–µ–º–µ–Ω—Ç –∏ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –û–±—â–∏–π –≤–µ—Å –æ–∫–æ–ª–æ 2 —Ç–æ–Ω–Ω.",
            "task_type": "loading",
            "location": "–ú–æ—Å–∫–≤–∞, –°—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∞ –Ω–∞ –õ–µ–Ω–∏–Ω—Å–∫–æ–º –ø—Ä–æ—Å–ø–µ–∫—Ç–µ",
            "metro_station": "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è",
            "requirements": [
                {"worker_type": "loader", "count": 3, "hourly_rate": 600.0},
                {"worker_type": "rigger", "count": 1, "hourly_rate": 800.0}
            ],
            "duration_hours": 6,
            "client_price": 12000.0,
            "status": "published"
        },
        {
            "title": "–£–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞",
            "description": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞ –ø–ª–æ—â–∞–¥—å—é 200 –∫–≤.–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç.",
            "task_type": "cleaning", 
            "location": "–ú–æ—Å–∫–≤–∞, –î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏",
            "metro_station": "–î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä",
            "requirements": [{"worker_type": "cleaner", "count": 2, "hourly_rate": 400.0}],
            "duration_hours": 8,
            "client_price": 6400.0,
            "status": "published"
        },
        {
            "title": "–°–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏ IKEA",
            "description": "–°–±–æ—Ä–∫–∞ –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞, 2 —à–∫–∞—Ñ–æ–≤ –∏ –æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –∏–∑ IKEA –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
            "task_type": "assembly",
            "location": "–ú–æ—Å–∫–≤–∞, –ù–æ–≤—ã–µ –ß–µ—Ä–µ–º—É—à–∫–∏",
            "metro_station": "–ö–∞–ª—É–∂—Å–∫–∞—è",
            "requirements": [{"worker_type": "handyman", "count": 1, "hourly_rate": 700.0}],
            "duration_hours": 6,
            "client_price": 4200.0,
            "status": "completed"
        },
        {
            "title": "–°–†–û–ß–ù–û! –ù—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä—É–∑—á–∏–∫",
            "description": "–ö —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–π –±—Ä–∏–≥–∞–¥–µ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω –µ—â–µ –æ–¥–∏–Ω –≥—Ä—É–∑—á–∏–∫. –ü–µ—Ä–µ–µ–∑–¥ –∑–∞—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è.",
            "task_type": "moving",
            "location": "–ú–æ—Å–∫–≤–∞, –ê—Ä–±–∞—Ç",
            "metro_station": "–ê—Ä–±–∞—Ç—Å–∫–∞—è",
            "requirements": [{"worker_type": "loader", "count": 1, "hourly_rate": 550.0}],
            "duration_hours": 4,
            "client_price": 2500.0,
            "status": "urgent"
        }
    ]
    
    for i, task_template in enumerate(task_templates):
        task_id = uuid.uuid4().hex
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client_id = client_ids[i % len(client_ids)]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–¥–∞–Ω–∏—è
        if task_template["status"] == "completed":
            start_date = datetime.now(timezone.utc) - timedelta(days=i*2+1)
        else:
            start_date = datetime.now(timezone.utc) + timedelta(days=i+1, hours=i*2)
        
        task = {
            "id": task_id,
            "title": task_template["title"],
            "description": task_template["description"],
            "task_type": task_template["task_type"],
            "requirements": task_template["requirements"],
            "location": task_template["location"],
            "metro_station": task_template["metro_station"],
            "start_datetime": start_date.isoformat(),
            "duration_hours": task_template["duration_hours"],
            "client_price": task_template["client_price"],
            "worker_price": task_template["client_price"] * 0.8,  # 80% –æ—Ç —Ü–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
            "verified_only": i % 3 == 0,  # –ö–∞–∂–¥–æ–µ —Ç—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
            "status": task_template["status"],
            "client_id": client_id,
            "assigned_workers": [worker_ids[0]] if task_template["status"] in ["completed", "in_progress"] else [],
            "applications_count": 0 if task_template["status"] in ["draft", "pending"] else i + 2,
            "created_at": (datetime.now(timezone.utc) - timedelta(hours=i*6)).isoformat(),
            "updated_at": (datetime.now(timezone.utc) - timedelta(hours=i*3)).isoformat(),
        }
        demo_tasks.append(task)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è
    await tasks_col.insert_many(demo_tasks)
    print(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(demo_tasks)} –∑–∞–¥–∞–Ω–∏–π")
    
    print("‚úÖ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(demo_users)}")
    print(f"   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: 1")
    print(f"   - –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")  
    print(f"   - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(workers)}")
    print(f"   –ó–∞–¥–∞–Ω–∏–π: {len(demo_tasks)}")
    
    status_counts = {}
    for task in demo_tasks:
        status = task["status"]
        status_counts[status] = status_counts.get(status, 0) + 1
    
    for status, count in status_counts.items():
        print(f"   - {status}: {count}")
    
    client.close()

if __name__ == "__main__":
    asyncio.run(create_demo_data())