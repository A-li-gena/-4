#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ
"""
import asyncio
import os
import sys
from datetime import datetime, timezone, timedelta
from motor.motor_asyncio import AsyncIOMotorClient
import uuid

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.append('/app/backend')
from server import UserRole, WorkerType, TaskStatus, TaskType

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MONGO_URL = "mongodb://localhost:27017"
DB_NAME = "workersystem"

async def create_test_data():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    # –ö–æ–ª–ª–µ–∫—Ü–∏–∏
    users_col = db.users
    tasks_col = db.tasks
    reminders_col = db.reminders
    
    print("üóÉÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∑–∞–∫–∞–∑—á–∏–∫–∞
    client_id = uuid.uuid4().hex
    client_user = {
        "id": client_id,
        "tg_chat_id": 123456789,
        "username": "test_client",
        "first_name": "–ê–ª–µ–∫—Å–µ–π",
        "last_name": "–ò–≤–∞–Ω–æ–≤",
        "phone": "+7 (905) 123-45-67",
        "role": UserRole.CLIENT,
        "is_active": True,
        "is_verified": True,
        "client_profile": {
            "company_name": "–û–û–û –ê–ª—å—Ñ–∞ –ü–µ—Ä–µ–µ–∑–¥—ã",
            "total_orders": 12,
            "total_spent": 45000.0,
            "rating": 4.8
        },
        "worker_profile": None,
        "created_at": (datetime.now(timezone.utc) - timedelta(days=30)).isoformat()
    }
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    worker_id = uuid.uuid4().hex
    worker_user = {
        "id": worker_id,
        "tg_chat_id": 987654321,
        "username": "test_worker",
        "first_name": "–î–º–∏—Ç—Ä–∏–π",
        "last_name": "–ü–µ—Ç—Ä–æ–≤",
        "phone": "+7 (911) 987-65-43",
        "role": UserRole.WORKER,
        "is_active": True,
        "is_verified": True,
        "worker_profile": {
            "worker_types": [WorkerType.LOADER, WorkerType.RIGGER],
            "rating": 4.9,
            "completed_tasks": 47,
            "cancelled_tasks": 2,
            "on_vacation": False,
            "vacation_start": None,
            "vacation_end": None,
            "metro_stations": ["–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞", "–ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –í–æ—Å—Å—Ç–∞–Ω–∏—è"],
            "work_schedule": {},
            "special_skills": {"has_belts": True, "has_transport": False}
        },
        "client_profile": None,
        "created_at": (datetime.now(timezone.utc) - timedelta(days=45)).isoformat()
    }
    
    # 3. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    admin_id = uuid.uuid4().hex
    admin_user = {
        "id": admin_id,
        "tg_chat_id": 111222333,
        "username": "admin",
        "first_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "last_name": "–°–∏—Å—Ç–µ–º—ã",
        "phone": "+7 (911) 111-22-33",
        "role": UserRole.ADMIN,
        "is_active": True,
        "is_verified": True,
        "worker_profile": None,
        "client_profile": None,
        "created_at": (datetime.now(timezone.utc) - timedelta(days=100)).isoformat()
    }
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await users_col.insert_many([client_user, worker_user, admin_user])
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
    tasks = []
    
    # –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    task1_id = uuid.uuid4().hex
    task1 = {
        "id": task1_id,
        "title": "–†–∞–∑–≥—Ä—É–∑–∫–∞ –º–µ–±–µ–ª–∏ –∏–∑ —Ñ—É—Ä—ã",
        "description": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å 3-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É. –ï—Å—Ç—å –¥–∏–≤–∞–Ω, —à–∫–∞—Ñ, —Å—Ç–æ–ª, —Å—Ç—É–ª—å—è, –∫–æ—Ä–æ–±–∫–∏ —Å –≤–µ—â–∞–º–∏. –†–∞–∑–≥—Ä—É–∑–∫–∞ –Ω–∞ 3 —ç—Ç–∞–∂ –±–µ–∑ –ª–∏—Ñ—Ç–∞.",
        "task_type": TaskType.LOADING,
        "requirements": [
            {"worker_type": WorkerType.LOADER, "count": 3, "hourly_rate": None}
        ],
        "location": "–°–ü–±, –ù–µ–≤—Å–∫–∏–π –ø—Ä., 25",
        "metro_station": "–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
        "start_datetime": (datetime.now(timezone.utc) + timedelta(days=2, hours=10)).isoformat(),
        "duration_hours": 4,
        "client_price": 4500.0,
        "worker_price": None,
        "verified_only": False,
        "additional_info": "–ó–∞–∫–∞–∑—á–∏–∫ –Ω–∞–¥–µ–∂–Ω—ã–π, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞–º–∏ —É–∂–µ 2 –≥–æ–¥–∞",
        "status": TaskStatus.PENDING,
        "client_id": client_id,
        "assigned_workers": [],
        "applications_count": 0,
        "created_at": (datetime.now(timezone.utc) - timedelta(hours=2)).isoformat(),
        "updated_at": (datetime.now(timezone.utc) - timedelta(hours=2)).isoformat()
    }
    
    # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    task2_id = uuid.uuid4().hex
    task2 = {
        "id": task2_id,
        "title": "–ü–µ—Ä–µ–µ–∑–¥ –æ—Ñ–∏—Å–∞",
        "description": "–ü–µ—Ä–µ–≤–µ–∑—Ç–∏ –æ—Ñ–∏—Å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –º–æ–Ω–∏—Ç–æ—Ä—ã, –ø—Ä–∏–Ω—Ç–µ—Ä—ã, –º–µ–±–µ–ª—å. –£–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è.",
        "task_type": TaskType.MOVING,
        "requirements": [
            {"worker_type": WorkerType.LOADER, "count": 2, "hourly_rate": None},
            {"worker_type": WorkerType.DRIVER, "count": 1, "hourly_rate": None}
        ],
        "location": "–°–ü–±, —É–ª. –ú–∞—Ä–∞—Ç–∞, 15",
        "metro_station": "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è",
        "start_datetime": (datetime.now(timezone.utc) + timedelta(days=5, hours=9)).isoformat(),
        "duration_hours": 8,
        "client_price": 12000.0,
        "worker_price": 10000.0,
        "verified_only": True,
        "additional_info": "–ú–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏–∫–∏, –Ω—É–∂–Ω—ã –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏",
        "status": TaskStatus.PUBLISHED,
        "client_id": client_id,
        "assigned_workers": [],
        "applications_count": 5,
        "created_at": (datetime.now(timezone.utc) - timedelta(days=1)).isoformat(),
        "updated_at": (datetime.now(timezone.utc) - timedelta(hours=3)).isoformat()
    }
    
    # –ó–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ
    task3_id = uuid.uuid4().hex
    task3 = {
        "id": task3_id,
        "title": "–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞",
        "description": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ—Å–ª–µ –µ–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç–∞. –ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é –ø—ã–ª—å, –ø–æ–º—ã—Ç—å –æ–∫–Ω–∞, –ø–æ–ª—ã.",
        "task_type": TaskType.CLEANING,
        "requirements": [
            {"worker_type": WorkerType.CLEANER, "count": 2, "hourly_rate": None}
        ],
        "location": "–°–ü–±, –ø—Ä. –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è, 67",
        "metro_station": "–ü—Ä–æ—Å–ø–µ–∫—Ç –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è",
        "start_datetime": (datetime.now(timezone.utc) + timedelta(hours=2)).isoformat(),
        "duration_hours": 6,
        "client_price": 6000.0,
        "worker_price": 5000.0,
        "verified_only": False,
        "additional_info": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–æ–≤–∞—è, —Ä–µ–º–æ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
        "status": TaskStatus.IN_PROGRESS,
        "client_id": client_id,
        "assigned_workers": [worker_id],
        "applications_count": 3,
        "created_at": (datetime.now(timezone.utc) - timedelta(days=3)).isoformat(),
        "updated_at": (datetime.now(timezone.utc) - timedelta(hours=1)).isoformat()
    }
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    task4_id = uuid.uuid4().hex
    task4 = {
        "id": task4_id,
        "title": "–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        "description": "–î–æ—Å—Ç–∞–≤–∏—Ç—å –∏ —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –æ–±—ä–µ–∫—Ç: –∫–∏—Ä–ø–∏—á, —Ü–µ–º–µ–Ω—Ç, –∞—Ä–º–∞—Ç—É—Ä–∞.",
        "task_type": TaskType.DELIVERY,
        "requirements": [
            {"worker_type": WorkerType.LOADER, "count": 3, "hourly_rate": None},
            {"worker_type": WorkerType.DRIVER, "count": 1, "hourly_rate": None}
        ],
        "location": "–°–ü–±, –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä., 44",
        "metro_station": "–õ–∞–¥–æ–∂—Å–∫–∞—è",
        "start_datetime": (datetime.now(timezone.utc) - timedelta(days=2)).isoformat(),
        "duration_hours": 5,
        "client_price": 8000.0,
        "worker_price": 6800.0,
        "verified_only": False,
        "additional_info": "–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—Ç–ª–∏—á–Ω–æ, –∑–∞–∫–∞–∑—á–∏–∫ –¥–æ–≤–æ–ª–µ–Ω",
        "status": TaskStatus.COMPLETED,
        "client_id": client_id,
        "assigned_workers": [worker_id],
        "applications_count": 7,
        "created_at": (datetime.now(timezone.utc) - timedelta(days=5)).isoformat(),
        "updated_at": (datetime.now(timezone.utc) - timedelta(days=2)).isoformat()
    }
    
    tasks = [task1, task2, task3, task4]
    await tasks_col.insert_many(tasks)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(tasks)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
    
    # 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminders = []
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
    reminder1_id = uuid.uuid4().hex
    reminder1 = {
        "id": reminder1_id,
        "user_id": client_id,
        "title": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
        "description": "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç",
        "remind_at": (datetime.now(timezone.utc) + timedelta(hours=3)).isoformat(),
        "task_id": task2_id,
        "is_sent": False,
        "created_at": (datetime.now(timezone.utc) - timedelta(hours=1)).isoformat()
    }
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞
    reminder2_id = uuid.uuid4().hex
    reminder2 = {
        "id": reminder2_id,
        "user_id": client_id,
        "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
        "description": "–û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–µ–∑–¥–∞ –æ—Ñ–∏—Å–∞ –∏ —É—Ç–æ—á–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        "remind_at": (datetime.now(timezone.utc) + timedelta(days=1, hours=9)).isoformat(),
        "task_id": None,
        "is_sent": False,
        "created_at": (datetime.now(timezone.utc) - timedelta(minutes=30)).isoformat()
    }
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    reminder3_id = uuid.uuid4().hex
    reminder3 = {
        "id": reminder3_id,
        "user_id": worker_id,
        "title": "–ü—Ä–∏–µ—Ö–∞—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç –∫ 14:00",
        "description": "–ù–µ –∑–∞–±—ã—Ç—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Ä–µ–º–Ω–∏ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –¥–ª—è —Ç–∞–∫–µ–ª–∞–∂–Ω—ã—Ö —Ä–∞–±–æ—Ç",
        "remind_at": (datetime.now(timezone.utc) + timedelta(hours=1)).isoformat(),
        "task_id": task1_id,
        "is_sent": False,
        "created_at": (datetime.now(timezone.utc) - timedelta(minutes=15)).isoformat()
    }
    
    reminders = [reminder1, reminder2, reminder3]
    await reminders_col.insert_many(reminders)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(reminders)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    print(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    print(f"üìã –ó–∞–¥–∞–Ω–∏—è: {len(tasks)} —à—Ç")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 3 —à—Ç (–∑–∞–∫–∞–∑—á–∏–∫, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –∞–¥–º–∏–Ω)")
    print(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(reminders)} —à—Ç")
    
    print(f"\nüîó –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è WebApp:")
    print(f"   –ó–∞–∫–∞–∑—á–∏–∫ ID: {client_id}")
    print(f"   WebApp URL: http://localhost:3000/webapp?user_id={client_id}")
    
    print(f"\nü§ñ –¢–µ—Å—Ç–æ–≤—ã–µ Telegram —á–∞—Ç—ã:")
    print(f"   –ó–∞–∫–∞–∑—á–∏–∫: {client_user['tg_chat_id']}")
    print(f"   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker_user['tg_chat_id']}")
    print(f"   –ê–¥–º–∏–Ω: {admin_user['tg_chat_id']}")
    
    client.close()

if __name__ == "__main__":
    asyncio.run(create_test_data())